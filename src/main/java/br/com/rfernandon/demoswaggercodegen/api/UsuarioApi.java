/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.10).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package br.com.rfernandon.demoswaggercodegen.api;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import br.com.rfernandon.demoswaggercodegen.model.ErrorDetails;
import br.com.rfernandon.demoswaggercodegen.model.Usuario;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-03-03T23:00:40.757-03:00")

@Api(value = "Usuario", description = "Lista de endpoints disponíveis para o recurso", tags={ "Usuario" })
@RequestMapping(value = "/api/v1")
public interface UsuarioApi {

    @ApiOperation(value = "Excluir um usuário", nickname = "usuarioDelete", notes = "Este endpoint exclui um determinado usuário cadastrado", authorizations = {
        @Authorization(value = "api_basic_auth")
    }, tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retorna o status http de operação OK"),
        @ApiResponse(code = 404, message = "Not Found - Usuário não localizado", response = ErrorDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error - Ocorreu um erro inesperado no servidor", response = ErrorDetails.class) })
    @RequestMapping(value = "/usuario/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.DELETE)
    Mono<Void> usuarioDelete(@ApiParam(value = "Parâmetro referente ao id do usuário",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Buscar usuários", nickname = "usuarioGet", notes = "Este endpoint retorna todos os usuários cadastrados", response = Usuario.class, responseContainer = "List", authorizations = {
        @Authorization(value = "api_basic_auth")
    }, tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK - Retorna uma lista com todos os usuários", response = Usuario.class, responseContainer = "List"),
        @ApiResponse(code = 204, message = "No Content - Nenhum usuário foi encontrado"),
        @ApiResponse(code = 500, message = "Internal Server Error - Ocorreu um erro inesperado no servidor", response = ErrorDetails.class) })
    @RequestMapping(value = "/usuario",
        produces = { "application/json", "application/xml" }, 
        consumes = { "application/json", "application/xml" },
        method = RequestMethod.GET)
    Flux<Usuario> usuarioGet();


    @ApiOperation(value = "Buscar um usuário", nickname = "usuarioGetById", notes = "Este endpoint retorna o usuário que foi especificado no path da uri", response = Usuario.class, authorizations = {
        @Authorization(value = "api_basic_auth")
    }, tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK - Retorna o usuário cadastrado", response = Usuario.class),
        @ApiResponse(code = 204, message = "No Content - Nenhum usuário foi encontrado"),
        @ApiResponse(code = 500, message = "Internal Server Error - Ocorreu um erro inesperado no servidor", response = ErrorDetails.class) })
    @RequestMapping(value = "/usuario/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.GET)
    Mono<Usuario> usuarioGetById(@ApiParam(value = "Parâmetro referente ao id do usuário",required=true) @PathVariable("id") Integer id);


    @ApiOperation(value = "Cadastrar usuário", nickname = "usuarioPost", notes = "Este endpoint cadastra um novo usuário", response = Usuario.class, authorizations = {
        @Authorization(value = "api_basic_auth")
    }, tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "OK - Retorna o usuário cadastrado", response = Usuario.class),
        @ApiResponse(code = 400, message = "Bad Request - Requisição inválida", response = ErrorDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error - Ocorreu um erro inesperado no servidor", response = ErrorDetails.class) })
    @RequestMapping(value = "/usuario",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    Mono<Usuario> usuarioPost(@ApiParam(value = "Parâmetro referente ao usuário" ,required=true )  @Valid @RequestBody Usuario usuario);


    @ApiOperation(value = "Atualizar um usuário", nickname = "usuarioPut", notes = "Este endpoint atualiza um determinado usuário cadastrado", response = Usuario.class, authorizations = {
        @Authorization(value = "api_basic_auth")
    }, tags={ "Usuario", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "OK - Retorna o usuário atualizado", response = Usuario.class),
        @ApiResponse(code = 400, message = "Bad Request - Requisição inválida", response = ErrorDetails.class),
        @ApiResponse(code = 404, message = "Not Found - Usuário não localizado", response = ErrorDetails.class),
        @ApiResponse(code = 500, message = "Internal Server Error - Ocorreu um erro inesperado no servidor", response = ErrorDetails.class) })
    @RequestMapping(value = "/usuario/{id}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    Mono<Usuario> usuarioPut(@ApiParam(value = "Parâmetro referente ao id do usuário",required=true) @PathVariable("id") Integer id,@ApiParam(value = "Parâmetro referente ao id do usuário" ,required=true )  @Valid @RequestBody Usuario usuario);

}
