https://stackoverflow.com/questions/5681851/mongodb-combine-data-from-multiple-collections-into-one-how
https://stackoverflow.com/questions/53562071/faceted-classification-spring-data-mongo/53594441
https://www.vivaolinux.com.br/artigo/MongoDB-Aggregation
https://www.huxiangyu.com/group-aggregate/
https://www.tfzx.net/article/10198425.html
https://stackoverflow.com/questions/53327613/using-multiple-facets-in-mongodb-spring-data

https://www.programcreek.com/java-api-examples/index.php?api=org.springframework.data.mongodb.core.aggregation.Aggregation
https://www.codota.com/code/java/classes/org.springframework.data.mongodb.core.aggregation.Aggregation
https://www.thetopsites.net/article/58427144.shtml
https://docs.mongodb.com/manual/reference/operator/aggregation/lookup/#unwind-example
https://engineering.universe.com/mongo-aggregations-in-5-minutes-b8e1d9c274bb?gi=94a8519d33d7
https://www.javacodegeeks.com/2016/04/data-aggregation-spring-data-mongodb-spring-boot.html
https://www.programmersought.com/article/6916983820/
https://www.codeproject.com/Articles/1077839/Working-with-MongoDBs-lookup-Aggregator


@InjectMocks
private PurchaseRepositoryImpl purchaseRepository;

@Mock
private MongoTemplate mongoTemplate;

when(iamClientIdentitiesRepository.getClientAuthorization()).thenReturn(AUTHORIZATION);
doNothing().when(orderScreeningService).verify(any());
Mockito.verify(mongoTemplate).updateFirst(any(Query.class), any(Update.class), any(Class.class));



ArgumentCaptor<Query> queryArgumentCaptor = forClass(Query.class);
verify(mongoTemplate).find(queryArgumentCaptor.capture(), eq(PurchaseDocument.class));
Query query = queryArgumentCaptor.getValue();
Document queryObject = query.getQueryObject();



@Rule
public ExpectedException expectedException = ExpectedException.none();

@Test
public void whenConvertWithWrongDataShouldThrowInvalidParameterException() {
	expectedException.expect(InvalidParameterException.class);
	handler.convert(null);
}

verify(orchestratorIntegration).capturePayment(
                eq(order.getOrderType()),
                eq(order.getOrderId()),
                eq(order.getOrderEventId()),
                anyLong());
verify(filterChain, times(1)).doFilter(servletRequest, servletResponse);



@Autowired
protected MockMvc mockMvc;

when(businessAccountService.addBusinessAccountPartner(any(), any(), any())).thenReturn(getBusinessIdentityResponse());
ResultActions resultActions = mockMvc.perform(post(CROSS_DOMAIN_ACCOUNT_V1 + "/business-accounts/register-partner")
        .contentType(MediaType.APPLICATION_JSON)
        .header("Authorization", "Bearer JWT")
        .content(json))
        .andDo(print())
        .andExpect(status().is2xxSuccessful());

String response = resultActions.andReturn().getResponse().getContentAsString();
BusinessResponse responseObject = convertJSONToObject(response, BusinessResponse.class);
assertNotNull(responseObject);
assertEquals( "111111111" , responseObject.getUserId());
assertEquals( "222222222" , responseObject.getUserIdentityId());
assertEquals( "333333333" , responseObject.getBusinessId());



mockMvc.perform(post(ACCOUNT_URI + "/my-business-accounts/inviteuser-mobile")
        .contentType(APPLICATION_JSON_VALUE).header("Authorization", "Bearer JWT")
        .content(json))
        .andExpect(jsonPath("$").isArray())
        .andExpect(jsonPath("$").isNotEmpty())
        .andExpect(jsonPath("$[0].existingUser").exists())
        .andExpect(jsonPath("$[0].mobile.regionCode").value(55))
        .andExpect(jsonPath("$[0].mobile.areaCode").value(11))
        .andExpect(jsonPath("$[0].mobile.phoneNumber").value(988887777L))
        .andExpect(status().isOk());

mockMvc.perform(post(CROSS_DOMAIN_ACCOUNT_V1 + "/synchronization")
        .contentType(APPLICATION_JSON).header("Authorization", "Bearer JWT")
        .content(convertToJSON(DataBuilder.buildAuthStrongEventPayLoad()))
        .param("event", AuthStrongEnum.BUSINESS.toString())
        .param("clientId", "12345")
        .param("timeMilli", "10000")
        .param("validationCode", "0"))
        .andDo(print())
        .andExpect(status().isAccepted());



@Before
public void init() {
    ReflectionTestUtils.setField(businessRegisterValidatorService, "memeiClientId", "memeiClientId");
    MockitoAnnotations.initMocks(this);
}



JSONObject companySize = new JSONObject();
companySize.put("id", 1);
companySize.put("description", "XYZ");

JSONObject response = new JSONObject();
response.put("companySize", companySize);

when(restTemplateServiceUtil.exchange(anyString(), any(), any())).thenReturn(response.toString());
businessSizeValidatorService.validateBusinessPort(getBusinessAccountDocument());


when(userIdentitiesService.raiseIdentityToken(any(UserDocument.class), anyString(), any())).thenAnswer(invOnMock -> createMockBearer());
when(userIdentitiesService.addUserIdentity(any(UserDocument.class), anyString(), eq(clientId))).then(invocationOnMock -> {
    UserDocument mockArgument = invocationOnMock.getArgument(0);
    System.out.println("mockArgument = " + mockArgument);
    mockArgument.set_id(new ObjectId());
    return mockArgument;
});




doNothing().when(groupConfigService).addGroupToBusiness(anyString(), any());
doThrow(new ContentNotFoundException()).when(identificService).updateIdentificApiKey(anyString(), any(IdentificApiKeyConfigDocument.class));

when(identificService.addIdentificApiKey(any(IdentificApiKeyConfigDocument.class))).thenThrow(new InvalidParametersException(singleError("73")));




private MongoTemplate mongoTemplate = mock(MongoTemplate.class);

@InjectMocks
private GroupRepositoryCustom repository;

@Mock
private MongoTemplate mongoTemplate;





@Test
public void shouldAddGroupToClient() {
    final String serviceId = new ObjectId().toHexString();
    final ObjectId groupId = new ObjectId();

    clientRepository.addGroupToClient(serviceId, groupId);
    ArgumentCaptor<Query> queryCaptor = ArgumentCaptor.forClass(Query.class);
    ArgumentCaptor<Update> updateCaptor = ArgumentCaptor.forClass(Update.class);
    verify(mongoTemplate, times(1)).updateFirst(queryCaptor.capture(), updateCaptor.capture(), eq(ClientDocument.class));

    Query queryValue = queryCaptor.getValue();
    Document queryObject = queryValue.getQueryObject();

    assertTrue(queryObject.containsKey("serviceId"));
    assertEquals(serviceId, queryObject.get("serviceId"));
}

@Test
public void addGroupToUser() {
    final String userId = new ObjectId().toHexString();

    final ObjectId groupId = new ObjectId();
    this.userRepositoryCustom.addGroupToUser(userId, groupId);

    ArgumentCaptor<Query> queryCaptor = ArgumentCaptor.forClass(Query.class);
    ArgumentCaptor<Update> updateCaptor = ArgumentCaptor.forClass(Update.class);
    verify(mongoTemplate, times(1)).updateFirst(queryCaptor.capture(), updateCaptor.capture(), eq(UserDocument.class));

    Query queryValue = queryCaptor.getValue();

    Document queryObject = queryValue.getQueryObject();
    assertTrue("Should contains field userId", queryObject.containsKey("userId"));
    assertEquals(userId, queryObject.get("userId"));

    Update updateValue = updateCaptor.getValue();

    Document updateObject = updateValue.getUpdateObject();
    assertTrue("Should contains field $addToSet", updateObject.containsKey("$addToSet"));

    Document addToSet = (Document) updateObject.get("$addToSet");
    assertTrue("Should contains field groups", addToSet.containsKey("groups"));
    assertEquals(groupId, addToSet.get("groups"));
}

doCallRealMethod().when(fileValidator).validateMultipartFile(any(FileDocument.class), any(MultipartFile.class));
        doReturn(verifyPersonResponseResponseEntity).when(restTemplate).exchange(any(String.class), any(HttpMethod.class), any(HttpEntity.class), Mockito.eq(DataEncryptResponse.class));
doAnswer(CREATE_COMMAND_MOCK_OF_BUS).when(bus).exec(any());

@Component
@Slf4j
public class ScheduledTasks {

    private PurgeService purgeService;

    public ScheduledTasks(PurgeService purgeService) {
        this.purgeService = purgeService;
    }

    @Value("${scheduler.purge.quantity}")
    private Integer purgeQuantity;

    @Scheduled(cron = "${scheduler.cron.configuration}")
    public void executePurge(){
        log.info("Start Purge process...");
        purgeService.purgeFiles(purgeQuantity);
        log.info("Finish Purge process...");
    }
}

@RunWith(SpringRunner.class)
public class ScheduledTasksTest {

    @MockBean
    private PurgeService purgeService;

    @InjectMocks
    private ScheduledTasks scheduledTasks;

    @Before
    public void init() {
        initMocks(this);
        ReflectionTestUtils.setField(scheduledTasks, "purgeQuantity", 500);

    }

    @Test
    public void shouldStartPurgeProcess() {
        scheduledTasks.executePurge();
        verify(purgeService, Mockito.times(1)).purgeFiles(500);
    }
}
